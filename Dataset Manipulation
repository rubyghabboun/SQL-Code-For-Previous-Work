
CREATE OR REPLACE TEMPORARY TABLE best_matches AS (
select 
  a.carrier_unique_id,
        COUNT(DISTINCT a.eh_id) OVER (PARTITION BY a.carrier_unique_id) AS match_count,
        DATE_TRUNC('month', TO_DATE(b.original_application_date)) AS orig_month_sold,
        DATE_TRUNC('month', TO_DATE(b.original_effective_date)) AS orig_month_eff,
        CASE WHEN match_count > 1 OR orig_month_sold IS NULL THEN 'Retail' ELSE b.first_commission_type END AS first_commission_type_updated,
        MIN(b.eh_application_id) OVER (PARTITION BY a.carrier_unique_id) AS min_app_id,
        MIN(b.date_enrolled) OVER (PARTITION BY a.carrier_unique_id) AS min_date_enrolled,
        
        -- Include all other columns from aca_policy_details
        b.* 
from member_map a
left join policy_details b
    on a.eh_id = b.eh_id
    and b.net_new_identifier = 'Net New'
where a.carrier_group <> 'Anthem'
)

;


CREATE OR REPLACE TEMPORARY TABLE Finance_logic_joined AS (
    SELECT
        *
    FROM best_matches
    WHERE min_date_enrolled = date_enrolled  -- changed to min date enrolled    
    AND MATCH_COUNT > 1
) 
;

CREATE OR REPLACE TEMPORARY TABLE Finance_logic_joined AS (
    SELECT *
    FROM (
        SELECT *,
               ROW_NUMBER() OVER (
                   PARTITION BY carrier_unique_id
                   ORDER BY min_app_id -- Pick the row with the smallest app ID for duplicates
               ) AS row_rank
        FROM Finance_logic_joined
    ) ranked_rows
    WHERE row_rank = 1
);


    ---------------------------------------------------------------------------------
    ----------------------------- Active Policies For MM ----------------------------
    ---------------------------------------------------------------------------------

CREATE OR REPLACE TEMPORARY TABLE multi_matching_active_policies AS
SELECT 
   ACT.*,
   fin.ORIG_MONTH_SOLD,
   fin.ORIG_MONTH_EFF,
   fin.FIRST_COMMISSION_TYPE_UPDATED,
   fin.MIN_APP_ID,
   fin.ENROLLMENT_PLATFORM,
   fin.EH_APPLICATION_ID,
   fin.ENROLLMENT_EFFECTIVE_DATE,
   fin.DATE_ENROLLED,
   fin.EH_ID,
   fin.MEMBERSHIP_COUNT
FROM aca_dcp_direct_active_window AS act
LEFT JOIN Finance_logic_joined fin
    on fin.carrier_unique_id = act.carrier_unique_id
WHERE  EXISTS (
    SELECT carrier_unique_id, eh_id
    FROM Finance_logic_joined AS fin
    WHERE fin.carrier_unique_id = act.carrier_unique_id
)
  ;

   --------------------------------------START--------------------------------------

  CREATE OR REPLACE TEMPORARY TABLE first_eh_ids
    AS
    SELECT
        apd.eh_id
        , apd.date_enrolled
        , apd.enrollment_effective_date AS enrollment_effective_date    
        , CASE WHEN DAY(apd.enrollment_effective_date) > 1 
            THEN DATE_TRUNC(month, DATEADD(month, 1, apd.enrollment_effective_date))
            ELSE apd.enrollment_effective_date END AS adjusted_effective_date
        , apd.original_licensing_source
        , apd.original_application_date
        , apd.original_application_id
        , apd.written_down_flag
        , apd.adj_original_application_date
        , apd.adj_original_effective_date
    FROM aca_policy_details AS apd
    WHERE apd.eh_id IS NOT NULL -- There are policies without an eh id due to TC w/o state
    AND apd.net_new_identifier = 'Net New'
    QUALIFY ROW_NUMBER() OVER(PARTITION BY apd.eh_id 
        ORDER BY adjusted_effective_date ASC, apd.date_enrolled ASC) = 1
    ;



    ---------------------------------------------------------------------------------
    ------------------------- Create Base Churn Table -------------------------------
    ---------------------------------------START-------------------------------------


    CREATE OR REPLACE TEMPORARY TABLE tmp_aca_churn
    AS
    SELECT
        d.original_licensing_source
        , d.eh_id
        , d.original_application_date AS original_date_enrolled
        , d.original_application_id
        , d.adjusted_effective_date AS original_effective_date
        , d.written_down_flag
        , d.adj_original_application_date
        , d.adj_original_effective_date
        , m.coverage_month
        , DATEDIFF(MONTH, d.adjusted_effective_date, m.coverage_month) AS month_number -- Negative numbers replace with 0
        , CAST(NULL AS INT) AS retained
        , CAST(NULL AS INT) AS submission
        , CAST(NULL AS NUMBER(38,0)) AS owning_application -- eh_application_id
        , CAST(NULL AS TIMESTAMP_NTZ(9)) AS owning_date_enrolled
        , CAST(NULL AS VARCHAR(256)) AS owning_licensing_source
        , CAST(NULL AS VARCHAR(256)) AS carrier_group
        , CAST(NULL AS VARCHAR(256)) AS carrier_unique_id
        , CAST(NULL AS DATE) AS carrier_effective
        , CAST(NULL AS DATE) AS adjusted_carrier_effective
        , CAST(NULL AS DATE) AS carrier_term
    FROM first_eh_ids AS d
    CROSS JOIN ref_months AS m -- changed to a cross join for eh_ids that matched with a policy much later than the effective date (eg eh_id 1024185210)
    WHERE month_number >= 0
    ;

THIS WAS JUST A SAMPLE CODE .
